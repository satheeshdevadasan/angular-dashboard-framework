{"version":3,"sources":["adf.js","column.js","dashboard.js","provider.js","angular-dashboard-framework.min.js","row.js","widget-content.js","widget.js","angular-dashboard-framework.tpl.js","angular-dashboard-framework.js"],"names":["window","undefined","angular","module","value","directive","$log","$compile","$rootScope","adfTemplatePath","rowTemplate","dashboard","moveWidgetInColumn","$scope","column","evt","widgets","$apply","splice","newIndex","oldIndex","$broadcast","findWidget","index","widget","i","length","w","idEquals","wid","findColumn","model","rows","r","j","columns","c","cid","getId","el","id","getAttribute","addWidgetToColumn","targetColumn","from","sourceColumn","item","warn","removeWidgetFromColumn","applySortable","$element","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","restrict","replace","scope","editMode","continuousEditMode","adfModel","options","templateUrl","link","col","isDefined","isArray","cloned","append","$timeout","$uibModal","stringToBoolean","string","toLowerCase","Boolean","copyWidgets","source","target","shift","push","fillStructure","root","counter","forEach","row","readColumns","changeStructure","structure","copy","createConfiguration","type","cfg","config","findFirstWidgetColumn","error","addNewWidgetToModel","name","unshift","isEditModeImmediate","edit","immediate","openEditMode","transclude","collapsible","editable","maximizable","adfWidgetFilter","controller","widgetFilter","structureName","$watch","oldVal","newVal","structures","title","titleTemplateUrl","editClass","toggleEditMode","modelCopy","$on","collapseAll","collapseExpandStatus","cancelEditMode","editDashboardDialog","editDashboardScope","$new","adfEditTemplatePath","editTemplateUrl","instance","open","backdrop","info","closeDialog","close","$destroy","addWidgetDialog","addScope","isFunction","adfAddTemplatePath","addTemplateUrl","opts","addWidget","$attr","enableConfirmDelete","enableconfirmdelete","provider","widgetsPath","messageTemplate","loadingTemplate","this","extend","reload","frameless","path","template","$get","Date","getTime","other","toString","columnTemplate","$q","$sce","$http","$templateCache","$controller","$injector","parseUrl","url","parsedUrl","indexOf","substring","getTemplate","deferred","defer","resolve","tpl","get","getTrustedResourceUrl","success","response","put","reject","promise","compileWidget","currentScope","content","html","templateScope","base","resolvers","$tpl","key","isString","invoke","all","then","locals","templateCtrl","controllerAs","children","data","contents","reason","msg","preLink","definition","styleClass","fromJson","widgetState","isCollapsed","collapsed","debug","postLink","deleteWidget","remove","deleteScope","deleteTemplateUrl","deleteDialog","editScope","saveDialog","event","args","openFullScreen","fullScreenScope","size","modalSize","windowClass","compile","pre","post","run"],"mappings":"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","file":"angular-dashboard-framework.min.js","sourcesContent":["/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap'])\r\n  .value('adfTemplatePath', '../src/templates/')\r\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n  .value('adfVersion', '<<adfVersion>>');\r\n","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    'use strict';\r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n      \t\t\tif (!targetColumn.widgets) {\r\n      \t\t\t\ttargetColumn.widgets = [];\r\n      \t\t\t}\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n */\r\n\r\nangular.module('adf')\r\n  .directive('adfDashboard', function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath) {\r\n    'use strict';\r\n\r\n    function stringToBoolean(string){\r\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\r\n        case 'true': case 'yes': case '1': return true;\r\n        case 'false': case 'no': case '0': case null: return false;\r\n        default: return Boolean(string);\r\n      }\r\n    }\r\n\r\n    function copyWidgets(source, target) {\r\n      if ( source.widgets && source.widgets.length > 0 ){\r\n        var w = source.widgets.shift();\r\n        while (w){\r\n          target.widgets.push(w);\r\n          w = source.widgets.shift();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n    * Copy widget from old columns to the new model\r\n    * @param object root the model\r\n    * @param array of columns\r\n    * @param counter\r\n    */\r\n    function fillStructure(root, columns, counter) {\r\n      counter = counter || 0;\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (column) {\r\n            // if the widgets prop doesn't exist, create a new array for it.\r\n            // this allows ui.sortable to do it's thing without error\r\n            if (!column.widgets) {\r\n              column.widgets = [];\r\n            }\r\n\r\n            // if a column exist at the counter index, copy over the column\r\n            if (angular.isDefined(columns[counter])) {\r\n              // do not add widgets to a column, which uses nested rows\r\n              if (!angular.isDefined(column.rows)){\r\n                copyWidgets(columns[counter], column);\r\n                counter++;\r\n              }\r\n            }\r\n\r\n            // run fillStructure again for any sub rows/columns\r\n            counter = fillStructure(column, columns, counter);\r\n          });\r\n        });\r\n      }\r\n      return counter;\r\n    }\r\n\r\n    /**\r\n    * Read Columns: recursively searches an object for the 'columns' property\r\n    * @param object model\r\n    * @param array  an array of existing columns; used when recursion happens\r\n    */\r\n    function readColumns(root, columns) {\r\n      columns = columns || [];\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (col) {\r\n            columns.push(col);\r\n            // keep reading columns until we can't any more\r\n            readColumns(col, columns);\r\n          });\r\n        });\r\n      }\r\n\r\n      return columns;\r\n    }\r\n\r\n    function changeStructure(model, structure){\r\n      var columns = readColumns(model);\r\n      var counter = 0;\r\n\r\n      model.rows = angular.copy(structure.rows);\r\n\r\n      while ( counter < columns.length ){\r\n        counter = fillStructure(model, columns, counter);\r\n      }\r\n    }\r\n\r\n    function createConfiguration(type){\r\n      var cfg = {};\r\n      var config = dashboard.widgets[type].config;\r\n      if (config){\r\n        cfg = angular.copy(config);\r\n      }\r\n      return cfg;\r\n    }\r\n\r\n    /**\r\n     * Find first widget column in model.\r\n     *\r\n     * @param dashboard model\r\n     */\r\n    function findFirstWidgetColumn(model){\r\n      var column = null;\r\n      if (!angular.isArray(model.rows)){\r\n        $log.error('model does not have any rows');\r\n        return null;\r\n      }\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var row = model.rows[i];\r\n        if (angular.isArray(row.columns)){\r\n          for (var j=0; j<row.columns.length; j++){\r\n            var col = row.columns[j];\r\n            if (!col.rows){\r\n              column = col;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * Adds the widget to first column of the model.\r\n     *\r\n     * @param dashboard model\r\n     * @param widget to add to model\r\n     * @param name name of the dashboard\r\n     */\r\n    function addNewWidgetToModel(model, widget, name){\r\n      if (model){\r\n        var column = findFirstWidgetColumn(model);\r\n        if (column){\r\n          if (!column.widgets){\r\n            column.widgets = [];\r\n          }\r\n          column.widgets.unshift(widget);\r\n\r\n          // broadcast added event\r\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n        } else {\r\n          $log.error('could not find first widget column');\r\n        }\r\n      } else {\r\n        $log.error('model is undefined');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Checks if the edit mode of the widget should be opened immediately.\r\n     *\r\n     * @param widget type\r\n     */\r\n    function isEditModeImmediate(type){\r\n      var widget = dashboard.widgets[type];\r\n      return widget && widget.edit && widget.edit.immediate;\r\n    }\r\n\r\n    /**\r\n     * Opens the edit mode of the specified widget.\r\n     *\r\n     * @param dashboard scope\r\n     * @param widget\r\n     */\r\n    function openEditMode($scope, widget){\r\n      // wait some time before fire enter edit mode event\r\n      $timeout(function(){\r\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n      }, 200);\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude : false,\r\n      scope: {\r\n        structure: '@',\r\n        name: '@',\r\n        collapsible: '@',\r\n        editable: '@',\r\n        editMode: '@',\r\n        continuousEditMode: '=',\r\n        maximizable: '@',\r\n        adfModel: '=',\r\n        adfWidgetFilter: '='\r\n      },\r\n      controller: function($scope){\r\n        var model = {};\r\n        var structure = {};\r\n        var widgetFilter = null;\r\n        var structureName = {};\r\n        var name = $scope.name;\r\n\r\n        // Watching for changes on adfModel\r\n        $scope.$watch('adfModel', function(oldVal, newVal) {\r\n          // has model changed or is the model attribute not set\r\n          if (newVal !== null || (oldVal === null && newVal === null)) {\r\n            model = $scope.adfModel;\r\n            widgetFilter = $scope.adfWidgetFilter;\r\n            if ( ! model || ! model.rows ){\r\n              structureName = $scope.structure;\r\n              structure = dashboard.structures[structureName];\r\n              if (structure){\r\n                if (model){\r\n                  model.rows = angular.copy(structure).rows;\r\n                } else {\r\n                  model = angular.copy(structure);\r\n                }\r\n                model.structure = structureName;\r\n              } else {\r\n                $log.error( 'could not find structure ' + structureName);\r\n              }\r\n            }\r\n\r\n            if (model) {\r\n              if (!model.title){\r\n                model.title = 'Dashboard';\r\n              }\r\n              if (!model.titleTemplateUrl) {\r\n                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n              }\r\n              $scope.model = model;\r\n            } else {\r\n              $log.error('could not find or create model');\r\n            }\r\n          }\r\n        }, true);\r\n\r\n        // edit mode\r\n        $scope.editMode = false;\r\n        $scope.editClass = '';\r\n\r\n        $scope.toggleEditMode = function(){\r\n          $scope.editMode = ! $scope.editMode;\r\n          if ($scope.editMode){\r\n            if (!$scope.continuousEditMode) {\r\n              $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n              $rootScope.$broadcast('adfIsEditMode');\r\n            }\r\n          }\r\n\r\n          if (!$scope.editMode){\r\n            $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n          }\r\n        };\r\n\r\n        $scope.$on('adfToggleEditMode', function() {\r\n            $scope.toggleEditMode();\r\n        });\r\n\r\n        $scope.collapseAll = function(collapseExpandStatus){\r\n          $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\r\n        };\r\n\r\n        $scope.cancelEditMode = function(){\r\n          $scope.editMode = false;\r\n          if (!$scope.continuousEditMode) {\r\n            $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n          }\r\n          $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n        };\r\n\r\n        // edit dashboard settings\r\n        $scope.editDashboardDialog = function(){\r\n          var editDashboardScope = $scope.$new();\r\n          // create a copy of the title, to avoid changing the title to\r\n          // \"dashboard\" if the field is empty\r\n          editDashboardScope.copy = {\r\n            title: model.title\r\n          };\r\n          editDashboardScope.structures = dashboard.structures;\r\n\r\n          var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n          if(model.editTemplateUrl) {\r\n            adfEditTemplatePath = model.editTemplateUrl;\r\n          }\r\n          var instance = $uibModal.open({\r\n            scope: editDashboardScope,\r\n            templateUrl: adfEditTemplatePath,\r\n            backdrop: 'static'\r\n          });\r\n          $scope.changeStructure = function(name, structure){\r\n            $log.info('change structure to ' + name);\r\n            changeStructure(model, structure);\r\n          };\r\n          editDashboardScope.closeDialog = function(){\r\n            // copy the new title back to the model\r\n            model.title = editDashboardScope.copy.title;\r\n            // close modal and destroy the scope\r\n            instance.close();\r\n            editDashboardScope.$destroy();\r\n          };\r\n        };\r\n\r\n        // add widget dialog\r\n        $scope.addWidgetDialog = function(){\r\n          var addScope = $scope.$new();\r\n          var model = $scope.model;\r\n          var widgets;\r\n          if (angular.isFunction(widgetFilter)){\r\n            widgets = {};\r\n            angular.forEach(dashboard.widgets, function(widget, type){\r\n              if (widgetFilter(widget, type, model)){\r\n                widgets[type] = widget;\r\n              }\r\n            });\r\n          } else {\r\n            widgets = dashboard.widgets;\r\n          }\r\n          addScope.widgets = widgets;\r\n\r\n          var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n          if(model.addTemplateUrl) {\r\n            adfAddTemplatePath = model.addTemplateUrl;\r\n          }\r\n\r\n          var opts = {\r\n            scope: addScope,\r\n            templateUrl: adfAddTemplatePath,\r\n            backdrop: 'static'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n          addScope.addWidget = function(widget){\r\n            var w = {\r\n              type: widget,\r\n              config: createConfiguration(widget)\r\n            };\r\n            addNewWidgetToModel(model, w, name);\r\n            // close and destroy\r\n            instance.close();\r\n            addScope.$destroy();\r\n\r\n            // check for open edit mode immediately\r\n            if (isEditModeImmediate(widget)){\r\n              openEditMode($scope, w);\r\n            }\r\n          };\r\n          addScope.closeDialog = function(){\r\n            // close and destroy\r\n            instance.close();\r\n            addScope.$destroy();\r\n          };\r\n        };\r\n\r\n        $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n      },\r\n      link: function ($scope, $element, $attr) {\r\n        // pass options to scope\r\n        var options = {\r\n          name: $attr.name,\r\n          editable: true,\r\n          enableConfirmDelete: stringToBoolean($attr.enableconfirmdelete),\r\n          maximizable: stringToBoolean($attr.maximizable),\r\n          collapsible: stringToBoolean($attr.collapsible)\r\n        };\r\n        if (angular.isDefined($attr.editable)){\r\n          options.editable = stringToBoolean($attr.editable);\r\n        }\r\n        $scope.options = options;\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard.html'\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', [])\r\n  .provider('dashboard', function(){\r\n\r\n    var widgets = {};\r\n    var widgetsPath = '';\r\n    var structures = {};\r\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\r\n    var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\">loading ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#widget\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new widget.\r\n    *\r\n    * @param {string} name of the widget\r\n    * @param {object} widget to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `title` - `{string=}` - The title of the widget.\r\n    *   - `description` - `{string=}` - Description of the widget.\r\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n    *   - `config` - `{object}` - Predefined widget configuration.\r\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n    *      associated with newly created scope of the widget or the name of a\r\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n    *      if passed as a string.\r\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n    *   - `template` - `{string=|function()=}` - html template as a string.\r\n    *   - `templateUrl` - `{string=}` - path to an html template.\r\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the widget\r\n    *      will wait for them all to be resolved or one to be rejected before the controller is\r\n    *      instantiated.\r\n    *      If all the promises are resolved successfully, the values of the resolved promises are\r\n    *      injected.\r\n    *\r\n    *      The map object is:\r\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n    *        and the return value is treated as the dependency. If the result is a promise, it is\r\n    *        resolved before its value is injected into the controller.\r\n    *   - `edit` - `{object}` - Edit modus of the widget.\r\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n    *        Default is true.\r\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.widget = function(name, widget){\r\n      var w = angular.extend({reload: false, frameless: false}, widget);\r\n      if ( w.edit ){\r\n        var edit = {\r\n          reload: true,\r\n          immediate: false\r\n        };\r\n        angular.extend(edit, w.edit);\r\n        w.edit = edit;\r\n      }\r\n      widgets[name] = w;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#widgetsPath\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Sets the path to the directory which contains the widgets. The widgets\r\n     * path is used for widgets with a templateUrl which contains the\r\n     * placeholder {widgetsPath}. The placeholder is replaced with the\r\n     * configured value, before the template is loaded, but the template is\r\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n     * The default value of widgetPaths is ''.\r\n     *\r\n     *\r\n     * @param {string} path to the directory which contains the widgets\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.widgetsPath = function(path){\r\n      widgetsPath = path;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#structure\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new structure.\r\n    *\r\n    * @param {string} name of the structure\r\n    * @param {object} structure to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n    *     - `styleClass` - `{string}` - CSS Class of the row.\r\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n    *       - `styleClass` - `{string}` - CSS Class of the column.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.structure = function(name, structure){\r\n      structures[name] = structure;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#messageTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template for messages.\r\n    *\r\n    * @param {string} template for messages.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.messageTemplate = function(template){\r\n      messageTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#loadingTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template which is displayed as\r\n    * long as the widget resources are not resolved.\r\n    *\r\n    * @param {string} template loading template\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.loadingTemplate = function(template){\r\n      loadingTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc service\r\n    * @name adf.dashboard\r\n    * @description\r\n    *\r\n    * The dashboard holds all options, structures and widgets.\r\n    *\r\n    * @property {Array.<Object>} widgets Array of registered widgets.\r\n    * @property {string} widgetsPath Default path for widgets.\r\n    * @property {Array.<Object>} structures Array of registered structures.\r\n    * @property {string} messageTemplate Template for messages.\r\n    * @property {string} loadingTemplate Template for widget loading.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.$get = function(){\r\n      var cid = 0;\r\n\r\n      return {\r\n        widgets: widgets,\r\n        widgetsPath: widgetsPath,\r\n        structures: structures,\r\n        messageTemplate: messageTemplate,\r\n        loadingTemplate: loadingTemplate,\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#id\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Creates an ongoing numeric id. The method is used to create ids for\r\n         * columns and widgets in the dashboard.\r\n         */\r\n        id: function(){\r\n          return new Date().getTime() + '-' + (++cid);\r\n        },\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#idEqual\r\n         * @methodOf adf.dashboard\r\n         * @param {string} id\r\n         * @param {string} other id\r\n         * @description\r\n         *\r\n         * Checks if the given ids are equal.\r\n         */\r\n         idEquals: function(id, other){\r\n           // use toString, because old ids are numbers\r\n           return ((id) && (other)) && (id.toString() === other.toString());\r\n         }\r\n      };\r\n    };\r\n\r\n  });\r\n","(function(window, undefined) {'use strict';\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap'])\r\n  .value('adfTemplatePath', '../src/templates/')\r\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n  .value('adfVersion', '0.11.0-SNAPSHOT');\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', [\"$log\", \"$compile\", \"$rootScope\", \"adfTemplatePath\", \"rowTemplate\", \"dashboard\", function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    \r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n      \t\t\tif (!targetColumn.widgets) {\r\n      \t\t\t\ttargetColumn.widgets = [];\r\n      \t\t\t}\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n */\r\n\r\nangular.module('adf')\r\n  .directive('adfDashboard', [\"$rootScope\", \"$log\", \"$timeout\", \"$uibModal\", \"dashboard\", \"adfTemplatePath\", function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath) {\r\n    \r\n\r\n    function stringToBoolean(string){\r\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\r\n        case 'true': case 'yes': case '1': return true;\r\n        case 'false': case 'no': case '0': case null: return false;\r\n        default: return Boolean(string);\r\n      }\r\n    }\r\n\r\n    function copyWidgets(source, target) {\r\n      if ( source.widgets && source.widgets.length > 0 ){\r\n        var w = source.widgets.shift();\r\n        while (w){\r\n          target.widgets.push(w);\r\n          w = source.widgets.shift();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n    * Copy widget from old columns to the new model\r\n    * @param object root the model\r\n    * @param array of columns\r\n    * @param counter\r\n    */\r\n    function fillStructure(root, columns, counter) {\r\n      counter = counter || 0;\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (column) {\r\n            // if the widgets prop doesn't exist, create a new array for it.\r\n            // this allows ui.sortable to do it's thing without error\r\n            if (!column.widgets) {\r\n              column.widgets = [];\r\n            }\r\n\r\n            // if a column exist at the counter index, copy over the column\r\n            if (angular.isDefined(columns[counter])) {\r\n              // do not add widgets to a column, which uses nested rows\r\n              if (!angular.isDefined(column.rows)){\r\n                copyWidgets(columns[counter], column);\r\n                counter++;\r\n              }\r\n            }\r\n\r\n            // run fillStructure again for any sub rows/columns\r\n            counter = fillStructure(column, columns, counter);\r\n          });\r\n        });\r\n      }\r\n      return counter;\r\n    }\r\n\r\n    /**\r\n    * Read Columns: recursively searches an object for the 'columns' property\r\n    * @param object model\r\n    * @param array  an array of existing columns; used when recursion happens\r\n    */\r\n    function readColumns(root, columns) {\r\n      columns = columns || [];\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (col) {\r\n            columns.push(col);\r\n            // keep reading columns until we can't any more\r\n            readColumns(col, columns);\r\n          });\r\n        });\r\n      }\r\n\r\n      return columns;\r\n    }\r\n\r\n    function changeStructure(model, structure){\r\n      var columns = readColumns(model);\r\n      var counter = 0;\r\n\r\n      model.rows = angular.copy(structure.rows);\r\n\r\n      while ( counter < columns.length ){\r\n        counter = fillStructure(model, columns, counter);\r\n      }\r\n    }\r\n\r\n    function createConfiguration(type){\r\n      var cfg = {};\r\n      var config = dashboard.widgets[type].config;\r\n      if (config){\r\n        cfg = angular.copy(config);\r\n      }\r\n      return cfg;\r\n    }\r\n\r\n    /**\r\n     * Find first widget column in model.\r\n     *\r\n     * @param dashboard model\r\n     */\r\n    function findFirstWidgetColumn(model){\r\n      var column = null;\r\n      if (!angular.isArray(model.rows)){\r\n        $log.error('model does not have any rows');\r\n        return null;\r\n      }\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var row = model.rows[i];\r\n        if (angular.isArray(row.columns)){\r\n          for (var j=0; j<row.columns.length; j++){\r\n            var col = row.columns[j];\r\n            if (!col.rows){\r\n              column = col;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * Adds the widget to first column of the model.\r\n     *\r\n     * @param dashboard model\r\n     * @param widget to add to model\r\n     * @param name name of the dashboard\r\n     */\r\n    function addNewWidgetToModel(model, widget, name){\r\n      if (model){\r\n        var column = findFirstWidgetColumn(model);\r\n        if (column){\r\n          if (!column.widgets){\r\n            column.widgets = [];\r\n          }\r\n          column.widgets.unshift(widget);\r\n\r\n          // broadcast added event\r\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n        } else {\r\n          $log.error('could not find first widget column');\r\n        }\r\n      } else {\r\n        $log.error('model is undefined');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Checks if the edit mode of the widget should be opened immediately.\r\n     *\r\n     * @param widget type\r\n     */\r\n    function isEditModeImmediate(type){\r\n      var widget = dashboard.widgets[type];\r\n      return widget && widget.edit && widget.edit.immediate;\r\n    }\r\n\r\n    /**\r\n     * Opens the edit mode of the specified widget.\r\n     *\r\n     * @param dashboard scope\r\n     * @param widget\r\n     */\r\n    function openEditMode($scope, widget){\r\n      // wait some time before fire enter edit mode event\r\n      $timeout(function(){\r\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n      }, 200);\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude : false,\r\n      scope: {\r\n        structure: '@',\r\n        name: '@',\r\n        collapsible: '@',\r\n        editable: '@',\r\n        editMode: '@',\r\n        continuousEditMode: '=',\r\n        maximizable: '@',\r\n        adfModel: '=',\r\n        adfWidgetFilter: '='\r\n      },\r\n      controller: [\"$scope\", function($scope){\r\n        var model = {};\r\n        var structure = {};\r\n        var widgetFilter = null;\r\n        var structureName = {};\r\n        var name = $scope.name;\r\n\r\n        // Watching for changes on adfModel\r\n        $scope.$watch('adfModel', function(oldVal, newVal) {\r\n          // has model changed or is the model attribute not set\r\n          if (newVal !== null || (oldVal === null && newVal === null)) {\r\n            model = $scope.adfModel;\r\n            widgetFilter = $scope.adfWidgetFilter;\r\n            if ( ! model || ! model.rows ){\r\n              structureName = $scope.structure;\r\n              structure = dashboard.structures[structureName];\r\n              if (structure){\r\n                if (model){\r\n                  model.rows = angular.copy(structure).rows;\r\n                } else {\r\n                  model = angular.copy(structure);\r\n                }\r\n                model.structure = structureName;\r\n              } else {\r\n                $log.error( 'could not find structure ' + structureName);\r\n              }\r\n            }\r\n\r\n            if (model) {\r\n              if (!model.title){\r\n                model.title = 'Dashboard';\r\n              }\r\n              if (!model.titleTemplateUrl) {\r\n                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n              }\r\n              $scope.model = model;\r\n            } else {\r\n              $log.error('could not find or create model');\r\n            }\r\n          }\r\n        }, true);\r\n\r\n        // edit mode\r\n        $scope.editMode = false;\r\n        $scope.editClass = '';\r\n\r\n        $scope.toggleEditMode = function(){\r\n          $scope.editMode = ! $scope.editMode;\r\n          if ($scope.editMode){\r\n            if (!$scope.continuousEditMode) {\r\n              $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n              $rootScope.$broadcast('adfIsEditMode');\r\n            }\r\n          }\r\n\r\n          if (!$scope.editMode){\r\n            $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n          }\r\n        };\r\n\r\n        $scope.$on('adfToggleEditMode', function() {\r\n            $scope.toggleEditMode();\r\n        });\r\n\r\n        $scope.collapseAll = function(collapseExpandStatus){\r\n          $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\r\n        };\r\n\r\n        $scope.cancelEditMode = function(){\r\n          $scope.editMode = false;\r\n          if (!$scope.continuousEditMode) {\r\n            $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n          }\r\n          $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n        };\r\n\r\n        // edit dashboard settings\r\n        $scope.editDashboardDialog = function(){\r\n          var editDashboardScope = $scope.$new();\r\n          // create a copy of the title, to avoid changing the title to\r\n          // \"dashboard\" if the field is empty\r\n          editDashboardScope.copy = {\r\n            title: model.title\r\n          };\r\n          editDashboardScope.structures = dashboard.structures;\r\n\r\n          var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n          if(model.editTemplateUrl) {\r\n            adfEditTemplatePath = model.editTemplateUrl;\r\n          }\r\n          var instance = $uibModal.open({\r\n            scope: editDashboardScope,\r\n            templateUrl: adfEditTemplatePath,\r\n            backdrop: 'static'\r\n          });\r\n          $scope.changeStructure = function(name, structure){\r\n            $log.info('change structure to ' + name);\r\n            changeStructure(model, structure);\r\n          };\r\n          editDashboardScope.closeDialog = function(){\r\n            // copy the new title back to the model\r\n            model.title = editDashboardScope.copy.title;\r\n            // close modal and destroy the scope\r\n            instance.close();\r\n            editDashboardScope.$destroy();\r\n          };\r\n        };\r\n\r\n        // add widget dialog\r\n        $scope.addWidgetDialog = function(){\r\n          var addScope = $scope.$new();\r\n          var model = $scope.model;\r\n          var widgets;\r\n          if (angular.isFunction(widgetFilter)){\r\n            widgets = {};\r\n            angular.forEach(dashboard.widgets, function(widget, type){\r\n              if (widgetFilter(widget, type, model)){\r\n                widgets[type] = widget;\r\n              }\r\n            });\r\n          } else {\r\n            widgets = dashboard.widgets;\r\n          }\r\n          addScope.widgets = widgets;\r\n\r\n          var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n          if(model.addTemplateUrl) {\r\n            adfAddTemplatePath = model.addTemplateUrl;\r\n          }\r\n\r\n          var opts = {\r\n            scope: addScope,\r\n            templateUrl: adfAddTemplatePath,\r\n            backdrop: 'static'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n          addScope.addWidget = function(widget){\r\n            var w = {\r\n              type: widget,\r\n              config: createConfiguration(widget)\r\n            };\r\n            addNewWidgetToModel(model, w, name);\r\n            // close and destroy\r\n            instance.close();\r\n            addScope.$destroy();\r\n\r\n            // check for open edit mode immediately\r\n            if (isEditModeImmediate(widget)){\r\n              openEditMode($scope, w);\r\n            }\r\n          };\r\n          addScope.closeDialog = function(){\r\n            // close and destroy\r\n            instance.close();\r\n            addScope.$destroy();\r\n          };\r\n        };\r\n\r\n        $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n      }],\r\n      link: function ($scope, $element, $attr) {\r\n        // pass options to scope\r\n        var options = {\r\n          name: $attr.name,\r\n          editable: true,\r\n          enableConfirmDelete: stringToBoolean($attr.enableconfirmdelete),\r\n          maximizable: stringToBoolean($attr.maximizable),\r\n          collapsible: stringToBoolean($attr.collapsible)\r\n        };\r\n        if (angular.isDefined($attr.editable)){\r\n          options.editable = stringToBoolean($attr.editable);\r\n        }\r\n        $scope.options = options;\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard.html'\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', [])\r\n  .provider('dashboard', function(){\r\n\r\n    var widgets = {};\r\n    var widgetsPath = '';\r\n    var structures = {};\r\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\r\n    var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\">loading ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#widget\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new widget.\r\n    *\r\n    * @param {string} name of the widget\r\n    * @param {object} widget to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `title` - `{string=}` - The title of the widget.\r\n    *   - `description` - `{string=}` - Description of the widget.\r\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n    *   - `config` - `{object}` - Predefined widget configuration.\r\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n    *      associated with newly created scope of the widget or the name of a\r\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n    *      if passed as a string.\r\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n    *   - `template` - `{string=|function()=}` - html template as a string.\r\n    *   - `templateUrl` - `{string=}` - path to an html template.\r\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the widget\r\n    *      will wait for them all to be resolved or one to be rejected before the controller is\r\n    *      instantiated.\r\n    *      If all the promises are resolved successfully, the values of the resolved promises are\r\n    *      injected.\r\n    *\r\n    *      The map object is:\r\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n    *        and the return value is treated as the dependency. If the result is a promise, it is\r\n    *        resolved before its value is injected into the controller.\r\n    *   - `edit` - `{object}` - Edit modus of the widget.\r\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n    *        Default is true.\r\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.widget = function(name, widget){\r\n      var w = angular.extend({reload: false, frameless: false}, widget);\r\n      if ( w.edit ){\r\n        var edit = {\r\n          reload: true,\r\n          immediate: false\r\n        };\r\n        angular.extend(edit, w.edit);\r\n        w.edit = edit;\r\n      }\r\n      widgets[name] = w;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#widgetsPath\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Sets the path to the directory which contains the widgets. The widgets\r\n     * path is used for widgets with a templateUrl which contains the\r\n     * placeholder {widgetsPath}. The placeholder is replaced with the\r\n     * configured value, before the template is loaded, but the template is\r\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n     * The default value of widgetPaths is ''.\r\n     *\r\n     *\r\n     * @param {string} path to the directory which contains the widgets\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.widgetsPath = function(path){\r\n      widgetsPath = path;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#structure\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new structure.\r\n    *\r\n    * @param {string} name of the structure\r\n    * @param {object} structure to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n    *     - `styleClass` - `{string}` - CSS Class of the row.\r\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n    *       - `styleClass` - `{string}` - CSS Class of the column.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.structure = function(name, structure){\r\n      structures[name] = structure;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#messageTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template for messages.\r\n    *\r\n    * @param {string} template for messages.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.messageTemplate = function(template){\r\n      messageTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#loadingTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template which is displayed as\r\n    * long as the widget resources are not resolved.\r\n    *\r\n    * @param {string} template loading template\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.loadingTemplate = function(template){\r\n      loadingTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc service\r\n    * @name adf.dashboard\r\n    * @description\r\n    *\r\n    * The dashboard holds all options, structures and widgets.\r\n    *\r\n    * @property {Array.<Object>} widgets Array of registered widgets.\r\n    * @property {string} widgetsPath Default path for widgets.\r\n    * @property {Array.<Object>} structures Array of registered structures.\r\n    * @property {string} messageTemplate Template for messages.\r\n    * @property {string} loadingTemplate Template for widget loading.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.$get = function(){\r\n      var cid = 0;\r\n\r\n      return {\r\n        widgets: widgets,\r\n        widgetsPath: widgetsPath,\r\n        structures: structures,\r\n        messageTemplate: messageTemplate,\r\n        loadingTemplate: loadingTemplate,\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#id\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Creates an ongoing numeric id. The method is used to create ids for\r\n         * columns and widgets in the dashboard.\r\n         */\r\n        id: function(){\r\n          return new Date().getTime() + '-' + (++cid);\r\n        },\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#idEqual\r\n         * @methodOf adf.dashboard\r\n         * @param {string} id\r\n         * @param {string} other id\r\n         * @description\r\n         *\r\n         * Checks if the given ids are equal.\r\n         */\r\n         idEquals: function(id, other){\r\n           // use toString, because old ids are numbers\r\n           return ((id) && (other)) && (id.toString() === other.toString());\r\n         }\r\n      };\r\n    };\r\n\r\n  });\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', [\"$compile\", \"adfTemplatePath\", \"columnTemplate\", function ($compile, adfTemplatePath, columnTemplate) {\r\n    \r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n  .directive('adfWidgetContent', [\"$log\", \"$q\", \"$sce\", \"$http\", \"$templateCache\", \"$compile\", \"$controller\", \"$injector\", \"dashboard\", function($log, $q, $sce, $http, $templateCache,\r\n          $compile, $controller, $injector, dashboard) {\r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    function getTemplate(widget) {\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    }\r\n\r\n    function compileWidget($scope, $element, currentScope) {\r\n      var model = $scope.model;\r\n      var content = $scope.content;\r\n\r\n      // display loading template\r\n      $element.html(dashboard.loadingTemplate);\r\n\r\n      // create new scope\r\n      var templateScope = $scope.$new();\r\n\r\n      // pass config object to scope\r\n      if (!model.config) {\r\n        model.config = {};\r\n      }\r\n\r\n      templateScope.config = model.config;\r\n\r\n      // local injections\r\n      var base = {\r\n        $scope: templateScope,\r\n        widget: model,\r\n        config: model.config\r\n      };\r\n\r\n      // get resolve promises from content object\r\n      var resolvers = {};\r\n      resolvers.$tpl = getTemplate(content);\r\n      if (content.resolve) {\r\n        angular.forEach(content.resolve, function(promise, key) {\r\n          if (angular.isString(promise)) {\r\n            resolvers[key] = $injector.get(promise);\r\n          } else {\r\n            resolvers[key] = $injector.invoke(promise, promise, base);\r\n          }\r\n        });\r\n      }\r\n\r\n      // resolve all resolvers\r\n      $q.all(resolvers).then(function(locals) {\r\n        angular.extend(locals, base);\r\n\r\n        // compile & render template\r\n        var template = locals.$tpl;\r\n        $element.html(template);\r\n        if (content.controller) {\r\n          var templateCtrl = $controller(content.controller, locals);\r\n          if (content.controllerAs) {\r\n            templateScope[content.controllerAs] = templateCtrl;\r\n          }\r\n          $element.children().data('$ngControllerController', templateCtrl);\r\n        }\r\n        $compile($element.contents())(templateScope);\r\n      }, function(reason) {\r\n        // handle promise rejection\r\n        var msg = 'Could not resolve all promises';\r\n        if (reason) {\r\n          msg += ': ' + reason;\r\n        }\r\n        $log.warn(msg);\r\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n      });\r\n\r\n      // destroy old scope\r\n      if (currentScope) {\r\n        currentScope.$destroy();\r\n      }\r\n\r\n      return templateScope;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      scope: {\r\n        model: '=',\r\n        content: '='\r\n      },\r\n      link: function($scope, $element) {\r\n        var currentScope = compileWidget($scope, $element, null);\r\n        $scope.$on('widgetConfigChanged', function() {\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n        $scope.$on('widgetReload', function() {\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n      }\r\n    };\r\n\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n  .directive('adfWidget', [\"$log\", \"$uibModal\", \"$rootScope\", \"dashboard\", \"adfTemplatePath\", function($log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\r\n\r\n    function preLink($scope) {\r\n      var definition = $scope.definition;\r\n      if (definition) {\r\n        var w = dashboard.widgets[definition.type];\r\n        if (w) {\r\n          // pass title\r\n          if (!definition.title) {\r\n            definition.title = w.title;\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\r\n            if (w.titleTemplateUrl) {\r\n              definition.titleTemplateUrl = w.titleTemplateUrl;\r\n            }\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.frameless = w.frameless;\r\n          }\r\n\r\n          if (!definition.styleClass) {\r\n            definition.styleClass = w.styleClass;\r\n          }\r\n\r\n          // set id for sortable\r\n          if (!definition.wid) {\r\n            definition.wid = dashboard.id();\r\n          }\r\n\r\n          // pass copy of widget to scope\r\n          $scope.widget = angular.copy(w);\r\n\r\n          // create config object\r\n          var config = definition.config;\r\n          if (config) {\r\n            if (angular.isString(config)) {\r\n              config = angular.fromJson(config);\r\n            }\r\n          } else {\r\n            config = {};\r\n          }\r\n\r\n          // pass config to scope\r\n          $scope.config = config;\r\n\r\n          // collapse exposed $scope.widgetState property\r\n          if (!$scope.widgetState) {\r\n            $scope.widgetState = {};\r\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\r\n          }\r\n\r\n        } else {\r\n          $log.warn('could not find widget ' + definition.type);\r\n        }\r\n      } else {\r\n        $log.debug('definition not specified, widget was probably removed');\r\n      }\r\n    }\r\n\r\n    function postLink($scope, $element) {\r\n      var definition = $scope.definition;\r\n      if (definition) {\r\n        // bind close function\r\n\r\n        var deleteWidget = function() {\r\n          var column = $scope.col;\r\n          if (column) {\r\n            var index = column.widgets.indexOf(definition);\r\n            if (index >= 0) {\r\n              column.widgets.splice(index, 1);\r\n            }\r\n          }\r\n          $element.remove();\r\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n        };\r\n\r\n        $scope.remove = function() {\r\n          if ($scope.options.enableConfirmDelete) {\r\n            var deleteScope = $scope.$new();\r\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n            if (definition.deleteTemplateUrl) {\r\n              deleteTemplateUrl = definition.deleteTemplateUrl;\r\n            }\r\n            var opts = {\r\n              scope: deleteScope,\r\n              templateUrl: deleteTemplateUrl,\r\n              backdrop: 'static'\r\n            };\r\n            var instance = $uibModal.open(opts);\r\n\r\n            deleteScope.closeDialog = function() {\r\n              instance.close();\r\n              deleteScope.$destroy();\r\n            };\r\n            deleteScope.deleteDialog = function() {\r\n              deleteWidget();\r\n              deleteScope.closeDialog();\r\n            };\r\n          } else {\r\n            deleteWidget();\r\n          }\r\n        };\r\n\r\n        // bind reload function\r\n        $scope.reload = function() {\r\n          $scope.$broadcast('widgetReload');\r\n        };\r\n\r\n        // bind edit function\r\n        $scope.edit = function() {\r\n          var editScope = $scope.$new();\r\n          editScope.definition = angular.copy(definition);\r\n\r\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n          if (definition.editTemplateUrl) {\r\n            adfEditTemplatePath = definition.editTemplateUrl;\r\n          }\r\n\r\n          var opts = {\r\n            scope: editScope,\r\n            templateUrl: adfEditTemplatePath,\r\n            backdrop: 'static'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n          editScope.closeDialog = function() {\r\n            instance.close();\r\n            editScope.$destroy();\r\n          };\r\n          editScope.saveDialog = function() {\r\n            definition.title = editScope.definition.title;\r\n            angular.extend(definition.config, editScope.definition.config);\r\n            var widget = $scope.widget;\r\n            if (widget.edit && widget.edit.reload) {\r\n                // reload content after edit dialog is closed\r\n                $scope.$broadcast('widgetConfigChanged');\r\n            }\r\n            editScope.closeDialog();\r\n          };\r\n        };\r\n      } else {\r\n        $log.debug('widget not found');\r\n      }\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      templateUrl: adfTemplatePath + 'widget.html',\r\n      scope: {\r\n        definition: '=',\r\n        col: '=column',\r\n        editMode: '=',\r\n        options: '=',\r\n        widgetState: '='\r\n      },\r\n      controller: [\"$scope\", function($scope) {\r\n\r\n        $scope.$on('adfDashboardCollapseExpand', function(event, args) {\r\n          $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n        });\r\n\r\n        $scope.$on('adfWidgetEnterEditMode', function(event, widget){\r\n          if (dashboard.idEquals($scope.definition.wid, widget.wid)){\r\n            $scope.edit();\r\n          }\r\n        });\r\n\r\n        $scope.openFullScreen = function() {\r\n          var definition = $scope.definition;\r\n          var fullScreenScope = $scope.$new();\r\n          var opts = {\r\n            scope: fullScreenScope,\r\n            templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\r\n            backdrop: 'static',\r\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n          fullScreenScope.closeDialog = function() {\r\n            instance.close();\r\n            fullScreenScope.$destroy();\r\n          };\r\n        };\r\n      }],\r\n      compile: function() {\r\n\r\n        /**\r\n         * use pre link, because link of widget-content\r\n         * is executed before post link widget\r\n         */\r\n        return {\r\n          pre: preLink,\r\n          post: postLink\r\n        };\r\n      }\r\n    };\r\n\r\n  }]);\r\n\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>Edit Dashboard</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=dashboardTitle>Title</label> <input type=text class=form-control id=dashboardTitle ng-model=copy.title required> </div> <div class=form-group> <label>Structure</label> <div class=radio ng-repeat=\\\"(key, structure) in structures\\\"> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> {{key}} </label> </div> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<h1> {{model.title}} <span style=\\\"font-size: 16px\\\" class=pull-right> <a href ng-if=editMode title=\\\"add new widget\\\" ng-click=addWidgetDialog()> <i class=\\\"glyphicon glyphicon-plus-sign\\\"></i> </a> <a href ng-if=editMode title=\\\"edit dashboard\\\" ng-click=editDashboardDialog()> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href ng-if=options.editable title=\\\"{{editMode ? \\'save changes\\' : \\'enable edit mode\\'}}\\\" ng-click=toggleEditMode()> <i class=glyphicon x-ng-class=\\\"{\\'glyphicon-edit\\' : !editMode, \\'glyphicon-save\\' : editMode}\\\"></i> </a> <a href ng-if=editMode title=\\\"undo changes\\\" ng-click=cancelEditMode()> <i class=\\\"glyphicon glyphicon-repeat adf-flip\\\"></i> </a> </span> </h1> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode continuous-edit-mode=continuousEditMode> </adf-dashboard-row></div> </div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>Add new widget</h4> </div> <div class=modal-body> <div style=\\\"display: inline-block;\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"(key, widget) in widgets\\\"> <a href ng-click=addWidget(key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div>\");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title>Delete {{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle>Are you sure you want to delete this widget ?</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog()>Close</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog()>Delete</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>{{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle>Title</label> <input type=text class=form-control id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\" required> </div> </form> <div ng-if=widget.edit> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog()>Cancel</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=saveDialog()>Apply</button> </div> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"Reload Widget Content\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=close ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </div> <h4 class=modal-title>{{definition.title}}</h4> </div> <div class=modal-body> <adf-widget-content model=definition content=widget> </adf-widget-content></div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<h3 class=panel-title> {{definition.title}} <span class=pull-right> <a href title=\\\"reload widget content\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"change widget location\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"collapse widget\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"expand widget\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>  <a href title=\\\"edit widget configuration\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href title=\\\"fullscreen widget\\\" ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"remove widget\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </span> </h3> \");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"[{\\'panel panel-default\\':!widget.frameless || editMode},definition.styleClass]\\\" class=widget> <div class=\\\"panel-heading clearfix\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div ng-class=\\\"{\\'panel-body\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed> <adf-widget-content model=definition content=widget> </adf-widget-content></div> <div ng-class=\\\"{\\'panel-footer\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed ng-if=definition.footerTemplateUrl> <div ng-include src=definition.footerTemplateUrl></div> </div> </div> \");}]);})(window);","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\r\n    'use strict';\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n  .directive('adfWidgetContent', function($log, $q, $sce, $http, $templateCache,\r\n          $compile, $controller, $injector, dashboard) {\r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    function getTemplate(widget) {\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    }\r\n\r\n    function compileWidget($scope, $element, currentScope) {\r\n      var model = $scope.model;\r\n      var content = $scope.content;\r\n\r\n      // display loading template\r\n      $element.html(dashboard.loadingTemplate);\r\n\r\n      // create new scope\r\n      var templateScope = $scope.$new();\r\n\r\n      // pass config object to scope\r\n      if (!model.config) {\r\n        model.config = {};\r\n      }\r\n\r\n      templateScope.config = model.config;\r\n\r\n      // local injections\r\n      var base = {\r\n        $scope: templateScope,\r\n        widget: model,\r\n        config: model.config\r\n      };\r\n\r\n      // get resolve promises from content object\r\n      var resolvers = {};\r\n      resolvers.$tpl = getTemplate(content);\r\n      if (content.resolve) {\r\n        angular.forEach(content.resolve, function(promise, key) {\r\n          if (angular.isString(promise)) {\r\n            resolvers[key] = $injector.get(promise);\r\n          } else {\r\n            resolvers[key] = $injector.invoke(promise, promise, base);\r\n          }\r\n        });\r\n      }\r\n\r\n      // resolve all resolvers\r\n      $q.all(resolvers).then(function(locals) {\r\n        angular.extend(locals, base);\r\n\r\n        // compile & render template\r\n        var template = locals.$tpl;\r\n        $element.html(template);\r\n        if (content.controller) {\r\n          var templateCtrl = $controller(content.controller, locals);\r\n          if (content.controllerAs) {\r\n            templateScope[content.controllerAs] = templateCtrl;\r\n          }\r\n          $element.children().data('$ngControllerController', templateCtrl);\r\n        }\r\n        $compile($element.contents())(templateScope);\r\n      }, function(reason) {\r\n        // handle promise rejection\r\n        var msg = 'Could not resolve all promises';\r\n        if (reason) {\r\n          msg += ': ' + reason;\r\n        }\r\n        $log.warn(msg);\r\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n      });\r\n\r\n      // destroy old scope\r\n      if (currentScope) {\r\n        currentScope.$destroy();\r\n      }\r\n\r\n      return templateScope;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      scope: {\r\n        model: '=',\r\n        content: '='\r\n      },\r\n      link: function($scope, $element) {\r\n        var currentScope = compileWidget($scope, $element, null);\r\n        $scope.$on('widgetConfigChanged', function() {\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n        $scope.$on('widgetReload', function() {\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n      }\r\n    };\r\n\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n  .directive('adfWidget', function($log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\r\n\r\n    function preLink($scope) {\r\n      var definition = $scope.definition;\r\n      if (definition) {\r\n        var w = dashboard.widgets[definition.type];\r\n        if (w) {\r\n          // pass title\r\n          if (!definition.title) {\r\n            definition.title = w.title;\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\r\n            if (w.titleTemplateUrl) {\r\n              definition.titleTemplateUrl = w.titleTemplateUrl;\r\n            }\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.frameless = w.frameless;\r\n          }\r\n\r\n          if (!definition.styleClass) {\r\n            definition.styleClass = w.styleClass;\r\n          }\r\n\r\n          // set id for sortable\r\n          if (!definition.wid) {\r\n            definition.wid = dashboard.id();\r\n          }\r\n\r\n          // pass copy of widget to scope\r\n          $scope.widget = angular.copy(w);\r\n\r\n          // create config object\r\n          var config = definition.config;\r\n          if (config) {\r\n            if (angular.isString(config)) {\r\n              config = angular.fromJson(config);\r\n            }\r\n          } else {\r\n            config = {};\r\n          }\r\n\r\n          // pass config to scope\r\n          $scope.config = config;\r\n\r\n          // collapse exposed $scope.widgetState property\r\n          if (!$scope.widgetState) {\r\n            $scope.widgetState = {};\r\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\r\n          }\r\n\r\n        } else {\r\n          $log.warn('could not find widget ' + definition.type);\r\n        }\r\n      } else {\r\n        $log.debug('definition not specified, widget was probably removed');\r\n      }\r\n    }\r\n\r\n    function postLink($scope, $element) {\r\n      var definition = $scope.definition;\r\n      if (definition) {\r\n        // bind close function\r\n\r\n        var deleteWidget = function() {\r\n          var column = $scope.col;\r\n          if (column) {\r\n            var index = column.widgets.indexOf(definition);\r\n            if (index >= 0) {\r\n              column.widgets.splice(index, 1);\r\n            }\r\n          }\r\n          $element.remove();\r\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n        };\r\n\r\n        $scope.remove = function() {\r\n          if ($scope.options.enableConfirmDelete) {\r\n            var deleteScope = $scope.$new();\r\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n            if (definition.deleteTemplateUrl) {\r\n              deleteTemplateUrl = definition.deleteTemplateUrl;\r\n            }\r\n            var opts = {\r\n              scope: deleteScope,\r\n              templateUrl: deleteTemplateUrl,\r\n              backdrop: 'static'\r\n            };\r\n            var instance = $uibModal.open(opts);\r\n\r\n            deleteScope.closeDialog = function() {\r\n              instance.close();\r\n              deleteScope.$destroy();\r\n            };\r\n            deleteScope.deleteDialog = function() {\r\n              deleteWidget();\r\n              deleteScope.closeDialog();\r\n            };\r\n          } else {\r\n            deleteWidget();\r\n          }\r\n        };\r\n\r\n        // bind reload function\r\n        $scope.reload = function() {\r\n          $scope.$broadcast('widgetReload');\r\n        };\r\n\r\n        // bind edit function\r\n        $scope.edit = function() {\r\n          var editScope = $scope.$new();\r\n          editScope.definition = angular.copy(definition);\r\n\r\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n          if (definition.editTemplateUrl) {\r\n            adfEditTemplatePath = definition.editTemplateUrl;\r\n          }\r\n\r\n          var opts = {\r\n            scope: editScope,\r\n            templateUrl: adfEditTemplatePath,\r\n            backdrop: 'static'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n          editScope.closeDialog = function() {\r\n            instance.close();\r\n            editScope.$destroy();\r\n          };\r\n          editScope.saveDialog = function() {\r\n            definition.title = editScope.definition.title;\r\n            angular.extend(definition.config, editScope.definition.config);\r\n            var widget = $scope.widget;\r\n            if (widget.edit && widget.edit.reload) {\r\n                // reload content after edit dialog is closed\r\n                $scope.$broadcast('widgetConfigChanged');\r\n            }\r\n            editScope.closeDialog();\r\n          };\r\n        };\r\n      } else {\r\n        $log.debug('widget not found');\r\n      }\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      templateUrl: adfTemplatePath + 'widget.html',\r\n      scope: {\r\n        definition: '=',\r\n        col: '=column',\r\n        editMode: '=',\r\n        options: '=',\r\n        widgetState: '='\r\n      },\r\n      controller: function($scope) {\r\n\r\n        $scope.$on('adfDashboardCollapseExpand', function(event, args) {\r\n          $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n        });\r\n\r\n        $scope.$on('adfWidgetEnterEditMode', function(event, widget){\r\n          if (dashboard.idEquals($scope.definition.wid, widget.wid)){\r\n            $scope.edit();\r\n          }\r\n        });\r\n\r\n        $scope.openFullScreen = function() {\r\n          var definition = $scope.definition;\r\n          var fullScreenScope = $scope.$new();\r\n          var opts = {\r\n            scope: fullScreenScope,\r\n            templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\r\n            backdrop: 'static',\r\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n          fullScreenScope.closeDialog = function() {\r\n            instance.close();\r\n            fullScreenScope.$destroy();\r\n          };\r\n        };\r\n      },\r\n      compile: function() {\r\n\r\n        /**\r\n         * use pre link, because link of widget-content\r\n         * is executed before post link widget\r\n         */\r\n        return {\r\n          pre: preLink,\r\n          post: postLink\r\n        };\r\n      }\r\n    };\r\n\r\n  });\r\n",null,"(function(window, undefined) {'use strict';\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf', ['adf.provider', 'ui.bootstrap'])\r\n  .value('adfTemplatePath', '../src/templates/')\r\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n  .value('adfVersion', '0.11.0-SNAPSHOT');\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    \r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n      \t\t\tif (!targetColumn.widgets) {\r\n      \t\t\t\ttargetColumn.widgets = [];\r\n      \t\t\t}\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n */\r\n\r\nangular.module('adf')\r\n  .directive('adfDashboard', function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath) {\r\n    \r\n\r\n    function stringToBoolean(string){\r\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\r\n        case 'true': case 'yes': case '1': return true;\r\n        case 'false': case 'no': case '0': case null: return false;\r\n        default: return Boolean(string);\r\n      }\r\n    }\r\n\r\n    function copyWidgets(source, target) {\r\n      if ( source.widgets && source.widgets.length > 0 ){\r\n        var w = source.widgets.shift();\r\n        while (w){\r\n          target.widgets.push(w);\r\n          w = source.widgets.shift();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n    * Copy widget from old columns to the new model\r\n    * @param object root the model\r\n    * @param array of columns\r\n    * @param counter\r\n    */\r\n    function fillStructure(root, columns, counter) {\r\n      counter = counter || 0;\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (column) {\r\n            // if the widgets prop doesn't exist, create a new array for it.\r\n            // this allows ui.sortable to do it's thing without error\r\n            if (!column.widgets) {\r\n              column.widgets = [];\r\n            }\r\n\r\n            // if a column exist at the counter index, copy over the column\r\n            if (angular.isDefined(columns[counter])) {\r\n              // do not add widgets to a column, which uses nested rows\r\n              if (!angular.isDefined(column.rows)){\r\n                copyWidgets(columns[counter], column);\r\n                counter++;\r\n              }\r\n            }\r\n\r\n            // run fillStructure again for any sub rows/columns\r\n            counter = fillStructure(column, columns, counter);\r\n          });\r\n        });\r\n      }\r\n      return counter;\r\n    }\r\n\r\n    /**\r\n    * Read Columns: recursively searches an object for the 'columns' property\r\n    * @param object model\r\n    * @param array  an array of existing columns; used when recursion happens\r\n    */\r\n    function readColumns(root, columns) {\r\n      columns = columns || [];\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (col) {\r\n            columns.push(col);\r\n            // keep reading columns until we can't any more\r\n            readColumns(col, columns);\r\n          });\r\n        });\r\n      }\r\n\r\n      return columns;\r\n    }\r\n\r\n    function changeStructure(model, structure){\r\n      var columns = readColumns(model);\r\n      var counter = 0;\r\n\r\n      model.rows = angular.copy(structure.rows);\r\n\r\n      while ( counter < columns.length ){\r\n        counter = fillStructure(model, columns, counter);\r\n      }\r\n    }\r\n\r\n    function createConfiguration(type){\r\n      var cfg = {};\r\n      var config = dashboard.widgets[type].config;\r\n      if (config){\r\n        cfg = angular.copy(config);\r\n      }\r\n      return cfg;\r\n    }\r\n\r\n    /**\r\n     * Find first widget column in model.\r\n     *\r\n     * @param dashboard model\r\n     */\r\n    function findFirstWidgetColumn(model){\r\n      var column = null;\r\n      if (!angular.isArray(model.rows)){\r\n        $log.error('model does not have any rows');\r\n        return null;\r\n      }\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var row = model.rows[i];\r\n        if (angular.isArray(row.columns)){\r\n          for (var j=0; j<row.columns.length; j++){\r\n            var col = row.columns[j];\r\n            if (!col.rows){\r\n              column = col;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * Adds the widget to first column of the model.\r\n     *\r\n     * @param dashboard model\r\n     * @param widget to add to model\r\n     * @param name name of the dashboard\r\n     */\r\n    function addNewWidgetToModel(model, widget, name){\r\n      if (model){\r\n        var column = findFirstWidgetColumn(model);\r\n        if (column){\r\n          if (!column.widgets){\r\n            column.widgets = [];\r\n          }\r\n          column.widgets.unshift(widget);\r\n\r\n          // broadcast added event\r\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n        } else {\r\n          $log.error('could not find first widget column');\r\n        }\r\n      } else {\r\n        $log.error('model is undefined');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Checks if the edit mode of the widget should be opened immediately.\r\n     *\r\n     * @param widget type\r\n     */\r\n    function isEditModeImmediate(type){\r\n      var widget = dashboard.widgets[type];\r\n      return widget && widget.edit && widget.edit.immediate;\r\n    }\r\n\r\n    /**\r\n     * Opens the edit mode of the specified widget.\r\n     *\r\n     * @param dashboard scope\r\n     * @param widget\r\n     */\r\n    function openEditMode($scope, widget){\r\n      // wait some time before fire enter edit mode event\r\n      $timeout(function(){\r\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n      }, 200);\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude : false,\r\n      scope: {\r\n        structure: '@',\r\n        name: '@',\r\n        collapsible: '@',\r\n        editable: '@',\r\n        editMode: '@',\r\n        continuousEditMode: '=',\r\n        maximizable: '@',\r\n        adfModel: '=',\r\n        adfWidgetFilter: '='\r\n      },\r\n      controller: function($scope){\r\n        var model = {};\r\n        var structure = {};\r\n        var widgetFilter = null;\r\n        var structureName = {};\r\n        var name = $scope.name;\r\n\r\n        // Watching for changes on adfModel\r\n        $scope.$watch('adfModel', function(oldVal, newVal) {\r\n          // has model changed or is the model attribute not set\r\n          if (newVal !== null || (oldVal === null && newVal === null)) {\r\n            model = $scope.adfModel;\r\n            widgetFilter = $scope.adfWidgetFilter;\r\n            if ( ! model || ! model.rows ){\r\n              structureName = $scope.structure;\r\n              structure = dashboard.structures[structureName];\r\n              if (structure){\r\n                if (model){\r\n                  model.rows = angular.copy(structure).rows;\r\n                } else {\r\n                  model = angular.copy(structure);\r\n                }\r\n                model.structure = structureName;\r\n              } else {\r\n                $log.error( 'could not find structure ' + structureName);\r\n              }\r\n            }\r\n\r\n            if (model) {\r\n              if (!model.title){\r\n                model.title = 'Dashboard';\r\n              }\r\n              if (!model.titleTemplateUrl) {\r\n                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n              }\r\n              $scope.model = model;\r\n            } else {\r\n              $log.error('could not find or create model');\r\n            }\r\n          }\r\n        }, true);\r\n\r\n        // edit mode\r\n        $scope.editMode = false;\r\n        $scope.editClass = '';\r\n\r\n        $scope.toggleEditMode = function(){\r\n          $scope.editMode = ! $scope.editMode;\r\n          if ($scope.editMode){\r\n            if (!$scope.continuousEditMode) {\r\n              $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n              $rootScope.$broadcast('adfIsEditMode');\r\n            }\r\n          }\r\n\r\n          if (!$scope.editMode){\r\n            $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n          }\r\n        };\r\n\r\n        $scope.$on('adfToggleEditMode', function() {\r\n            $scope.toggleEditMode();\r\n        });\r\n\r\n        $scope.collapseAll = function(collapseExpandStatus){\r\n          $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\r\n        };\r\n\r\n        $scope.cancelEditMode = function(){\r\n          $scope.editMode = false;\r\n          if (!$scope.continuousEditMode) {\r\n            $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n          }\r\n          $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n        };\r\n\r\n        // edit dashboard settings\r\n        $scope.editDashboardDialog = function(){\r\n          var editDashboardScope = $scope.$new();\r\n          // create a copy of the title, to avoid changing the title to\r\n          // \"dashboard\" if the field is empty\r\n          editDashboardScope.copy = {\r\n            title: model.title\r\n          };\r\n          editDashboardScope.structures = dashboard.structures;\r\n\r\n          var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n          if(model.editTemplateUrl) {\r\n            adfEditTemplatePath = model.editTemplateUrl;\r\n          }\r\n          var instance = $uibModal.open({\r\n            scope: editDashboardScope,\r\n            templateUrl: adfEditTemplatePath,\r\n            backdrop: 'static'\r\n          });\r\n          $scope.changeStructure = function(name, structure){\r\n            $log.info('change structure to ' + name);\r\n            changeStructure(model, structure);\r\n          };\r\n          editDashboardScope.closeDialog = function(){\r\n            // copy the new title back to the model\r\n            model.title = editDashboardScope.copy.title;\r\n            // close modal and destroy the scope\r\n            instance.close();\r\n            editDashboardScope.$destroy();\r\n          };\r\n        };\r\n\r\n        // add widget dialog\r\n        $scope.addWidgetDialog = function(){\r\n          var addScope = $scope.$new();\r\n          var model = $scope.model;\r\n          var widgets;\r\n          if (angular.isFunction(widgetFilter)){\r\n            widgets = {};\r\n            angular.forEach(dashboard.widgets, function(widget, type){\r\n              if (widgetFilter(widget, type, model)){\r\n                widgets[type] = widget;\r\n              }\r\n            });\r\n          } else {\r\n            widgets = dashboard.widgets;\r\n          }\r\n          addScope.widgets = widgets;\r\n\r\n          var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n          if(model.addTemplateUrl) {\r\n            adfAddTemplatePath = model.addTemplateUrl;\r\n          }\r\n\r\n          var opts = {\r\n            scope: addScope,\r\n            templateUrl: adfAddTemplatePath,\r\n            backdrop: 'static'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n          addScope.addWidget = function(widget){\r\n            var w = {\r\n              type: widget,\r\n              config: createConfiguration(widget)\r\n            };\r\n            addNewWidgetToModel(model, w, name);\r\n            // close and destroy\r\n            instance.close();\r\n            addScope.$destroy();\r\n\r\n            // check for open edit mode immediately\r\n            if (isEditModeImmediate(widget)){\r\n              openEditMode($scope, w);\r\n            }\r\n          };\r\n          addScope.closeDialog = function(){\r\n            // close and destroy\r\n            instance.close();\r\n            addScope.$destroy();\r\n          };\r\n        };\r\n\r\n        $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n      },\r\n      link: function ($scope, $element, $attr) {\r\n        // pass options to scope\r\n        var options = {\r\n          name: $attr.name,\r\n          editable: true,\r\n          enableConfirmDelete: stringToBoolean($attr.enableconfirmdelete),\r\n          maximizable: stringToBoolean($attr.maximizable),\r\n          collapsible: stringToBoolean($attr.collapsible)\r\n        };\r\n        if (angular.isDefined($attr.editable)){\r\n          options.editable = stringToBoolean($attr.editable);\r\n        }\r\n        $scope.options = options;\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard.html'\r\n    };\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', [])\r\n  .provider('dashboard', function(){\r\n\r\n    var widgets = {};\r\n    var widgetsPath = '';\r\n    var structures = {};\r\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\r\n    var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\">loading ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#widget\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new widget.\r\n    *\r\n    * @param {string} name of the widget\r\n    * @param {object} widget to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `title` - `{string=}` - The title of the widget.\r\n    *   - `description` - `{string=}` - Description of the widget.\r\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n    *   - `config` - `{object}` - Predefined widget configuration.\r\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n    *      associated with newly created scope of the widget or the name of a\r\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n    *      if passed as a string.\r\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n    *   - `template` - `{string=|function()=}` - html template as a string.\r\n    *   - `templateUrl` - `{string=}` - path to an html template.\r\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the widget\r\n    *      will wait for them all to be resolved or one to be rejected before the controller is\r\n    *      instantiated.\r\n    *      If all the promises are resolved successfully, the values of the resolved promises are\r\n    *      injected.\r\n    *\r\n    *      The map object is:\r\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n    *        and the return value is treated as the dependency. If the result is a promise, it is\r\n    *        resolved before its value is injected into the controller.\r\n    *   - `edit` - `{object}` - Edit modus of the widget.\r\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n    *        Default is true.\r\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.widget = function(name, widget){\r\n      var w = angular.extend({reload: false, frameless: false}, widget);\r\n      if ( w.edit ){\r\n        var edit = {\r\n          reload: true,\r\n          immediate: false\r\n        };\r\n        angular.extend(edit, w.edit);\r\n        w.edit = edit;\r\n      }\r\n      widgets[name] = w;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#widgetsPath\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Sets the path to the directory which contains the widgets. The widgets\r\n     * path is used for widgets with a templateUrl which contains the\r\n     * placeholder {widgetsPath}. The placeholder is replaced with the\r\n     * configured value, before the template is loaded, but the template is\r\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n     * The default value of widgetPaths is ''.\r\n     *\r\n     *\r\n     * @param {string} path to the directory which contains the widgets\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.widgetsPath = function(path){\r\n      widgetsPath = path;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#structure\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new structure.\r\n    *\r\n    * @param {string} name of the structure\r\n    * @param {object} structure to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n    *     - `styleClass` - `{string}` - CSS Class of the row.\r\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n    *       - `styleClass` - `{string}` - CSS Class of the column.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.structure = function(name, structure){\r\n      structures[name] = structure;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#messageTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template for messages.\r\n    *\r\n    * @param {string} template for messages.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.messageTemplate = function(template){\r\n      messageTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#loadingTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template which is displayed as\r\n    * long as the widget resources are not resolved.\r\n    *\r\n    * @param {string} template loading template\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.loadingTemplate = function(template){\r\n      loadingTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc service\r\n    * @name adf.dashboard\r\n    * @description\r\n    *\r\n    * The dashboard holds all options, structures and widgets.\r\n    *\r\n    * @property {Array.<Object>} widgets Array of registered widgets.\r\n    * @property {string} widgetsPath Default path for widgets.\r\n    * @property {Array.<Object>} structures Array of registered structures.\r\n    * @property {string} messageTemplate Template for messages.\r\n    * @property {string} loadingTemplate Template for widget loading.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.$get = function(){\r\n      var cid = 0;\r\n\r\n      return {\r\n        widgets: widgets,\r\n        widgetsPath: widgetsPath,\r\n        structures: structures,\r\n        messageTemplate: messageTemplate,\r\n        loadingTemplate: loadingTemplate,\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#id\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Creates an ongoing numeric id. The method is used to create ids for\r\n         * columns and widgets in the dashboard.\r\n         */\r\n        id: function(){\r\n          return new Date().getTime() + '-' + (++cid);\r\n        },\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#idEqual\r\n         * @methodOf adf.dashboard\r\n         * @param {string} id\r\n         * @param {string} other id\r\n         * @description\r\n         *\r\n         * Checks if the given ids are equal.\r\n         */\r\n         idEquals: function(id, other){\r\n           // use toString, because old ids are numbers\r\n           return ((id) && (other)) && (id.toString() === other.toString());\r\n         }\r\n      };\r\n    };\r\n\r\n  });\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\r\n    \r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n  .directive('adfWidgetContent', function($log, $q, $sce, $http, $templateCache,\r\n          $compile, $controller, $injector, dashboard) {\r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    function getTemplate(widget) {\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    }\r\n\r\n    function compileWidget($scope, $element, currentScope) {\r\n      var model = $scope.model;\r\n      var content = $scope.content;\r\n\r\n      // display loading template\r\n      $element.html(dashboard.loadingTemplate);\r\n\r\n      // create new scope\r\n      var templateScope = $scope.$new();\r\n\r\n      // pass config object to scope\r\n      if (!model.config) {\r\n        model.config = {};\r\n      }\r\n\r\n      templateScope.config = model.config;\r\n\r\n      // local injections\r\n      var base = {\r\n        $scope: templateScope,\r\n        widget: model,\r\n        config: model.config\r\n      };\r\n\r\n      // get resolve promises from content object\r\n      var resolvers = {};\r\n      resolvers.$tpl = getTemplate(content);\r\n      if (content.resolve) {\r\n        angular.forEach(content.resolve, function(promise, key) {\r\n          if (angular.isString(promise)) {\r\n            resolvers[key] = $injector.get(promise);\r\n          } else {\r\n            resolvers[key] = $injector.invoke(promise, promise, base);\r\n          }\r\n        });\r\n      }\r\n\r\n      // resolve all resolvers\r\n      $q.all(resolvers).then(function(locals) {\r\n        angular.extend(locals, base);\r\n\r\n        // compile & render template\r\n        var template = locals.$tpl;\r\n        $element.html(template);\r\n        if (content.controller) {\r\n          var templateCtrl = $controller(content.controller, locals);\r\n          if (content.controllerAs) {\r\n            templateScope[content.controllerAs] = templateCtrl;\r\n          }\r\n          $element.children().data('$ngControllerController', templateCtrl);\r\n        }\r\n        $compile($element.contents())(templateScope);\r\n      }, function(reason) {\r\n        // handle promise rejection\r\n        var msg = 'Could not resolve all promises';\r\n        if (reason) {\r\n          msg += ': ' + reason;\r\n        }\r\n        $log.warn(msg);\r\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n      });\r\n\r\n      // destroy old scope\r\n      if (currentScope) {\r\n        currentScope.$destroy();\r\n      }\r\n\r\n      return templateScope;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      scope: {\r\n        model: '=',\r\n        content: '='\r\n      },\r\n      link: function($scope, $element) {\r\n        var currentScope = compileWidget($scope, $element, null);\r\n        $scope.$on('widgetConfigChanged', function() {\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n        $scope.$on('widgetReload', function() {\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n      }\r\n    };\r\n\r\n  });\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n  .directive('adfWidget', function($log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\r\n\r\n    function preLink($scope) {\r\n      var definition = $scope.definition;\r\n      if (definition) {\r\n        var w = dashboard.widgets[definition.type];\r\n        if (w) {\r\n          // pass title\r\n          if (!definition.title) {\r\n            definition.title = w.title;\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\r\n            if (w.titleTemplateUrl) {\r\n              definition.titleTemplateUrl = w.titleTemplateUrl;\r\n            }\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.frameless = w.frameless;\r\n          }\r\n\r\n          if (!definition.styleClass) {\r\n            definition.styleClass = w.styleClass;\r\n          }\r\n\r\n          // set id for sortable\r\n          if (!definition.wid) {\r\n            definition.wid = dashboard.id();\r\n          }\r\n\r\n          // pass copy of widget to scope\r\n          $scope.widget = angular.copy(w);\r\n\r\n          // create config object\r\n          var config = definition.config;\r\n          if (config) {\r\n            if (angular.isString(config)) {\r\n              config = angular.fromJson(config);\r\n            }\r\n          } else {\r\n            config = {};\r\n          }\r\n\r\n          // pass config to scope\r\n          $scope.config = config;\r\n\r\n          // collapse exposed $scope.widgetState property\r\n          if (!$scope.widgetState) {\r\n            $scope.widgetState = {};\r\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\r\n          }\r\n\r\n        } else {\r\n          $log.warn('could not find widget ' + definition.type);\r\n        }\r\n      } else {\r\n        $log.debug('definition not specified, widget was probably removed');\r\n      }\r\n    }\r\n\r\n    function postLink($scope, $element) {\r\n      var definition = $scope.definition;\r\n      if (definition) {\r\n        // bind close function\r\n\r\n        var deleteWidget = function() {\r\n          var column = $scope.col;\r\n          if (column) {\r\n            var index = column.widgets.indexOf(definition);\r\n            if (index >= 0) {\r\n              column.widgets.splice(index, 1);\r\n            }\r\n          }\r\n          $element.remove();\r\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n        };\r\n\r\n        $scope.remove = function() {\r\n          if ($scope.options.enableConfirmDelete) {\r\n            var deleteScope = $scope.$new();\r\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n            if (definition.deleteTemplateUrl) {\r\n              deleteTemplateUrl = definition.deleteTemplateUrl;\r\n            }\r\n            var opts = {\r\n              scope: deleteScope,\r\n              templateUrl: deleteTemplateUrl,\r\n              backdrop: 'static'\r\n            };\r\n            var instance = $uibModal.open(opts);\r\n\r\n            deleteScope.closeDialog = function() {\r\n              instance.close();\r\n              deleteScope.$destroy();\r\n            };\r\n            deleteScope.deleteDialog = function() {\r\n              deleteWidget();\r\n              deleteScope.closeDialog();\r\n            };\r\n          } else {\r\n            deleteWidget();\r\n          }\r\n        };\r\n\r\n        // bind reload function\r\n        $scope.reload = function() {\r\n          $scope.$broadcast('widgetReload');\r\n        };\r\n\r\n        // bind edit function\r\n        $scope.edit = function() {\r\n          var editScope = $scope.$new();\r\n          editScope.definition = angular.copy(definition);\r\n\r\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n          if (definition.editTemplateUrl) {\r\n            adfEditTemplatePath = definition.editTemplateUrl;\r\n          }\r\n\r\n          var opts = {\r\n            scope: editScope,\r\n            templateUrl: adfEditTemplatePath,\r\n            backdrop: 'static'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n          editScope.closeDialog = function() {\r\n            instance.close();\r\n            editScope.$destroy();\r\n          };\r\n          editScope.saveDialog = function() {\r\n            definition.title = editScope.definition.title;\r\n            angular.extend(definition.config, editScope.definition.config);\r\n            var widget = $scope.widget;\r\n            if (widget.edit && widget.edit.reload) {\r\n                // reload content after edit dialog is closed\r\n                $scope.$broadcast('widgetConfigChanged');\r\n            }\r\n            editScope.closeDialog();\r\n          };\r\n        };\r\n      } else {\r\n        $log.debug('widget not found');\r\n      }\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      templateUrl: adfTemplatePath + 'widget.html',\r\n      scope: {\r\n        definition: '=',\r\n        col: '=column',\r\n        editMode: '=',\r\n        options: '=',\r\n        widgetState: '='\r\n      },\r\n      controller: function($scope) {\r\n\r\n        $scope.$on('adfDashboardCollapseExpand', function(event, args) {\r\n          $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n        });\r\n\r\n        $scope.$on('adfWidgetEnterEditMode', function(event, widget){\r\n          if (dashboard.idEquals($scope.definition.wid, widget.wid)){\r\n            $scope.edit();\r\n          }\r\n        });\r\n\r\n        $scope.openFullScreen = function() {\r\n          var definition = $scope.definition;\r\n          var fullScreenScope = $scope.$new();\r\n          var opts = {\r\n            scope: fullScreenScope,\r\n            templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\r\n            backdrop: 'static',\r\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n          fullScreenScope.closeDialog = function() {\r\n            instance.close();\r\n            fullScreenScope.$destroy();\r\n          };\r\n        };\r\n      },\r\n      compile: function() {\r\n\r\n        /**\r\n         * use pre link, because link of widget-content\r\n         * is executed before post link widget\r\n         */\r\n        return {\r\n          pre: preLink,\r\n          post: postLink\r\n        };\r\n      }\r\n    };\r\n\r\n  });\r\n\nangular.module(\"adf\").run([\"$templateCache\", function($templateCache) {$templateCache.put(\"../src/templates/dashboard-column.html\",\"<div adf-id={{column.cid}} class=column ng-class=column.styleClass ng-model=column.widgets> <adf-widget ng-repeat=\\\"definition in column.widgets\\\" definition=definition column=column edit-mode=editMode options=options widget-state=widgetState>  </adf-widget></div> \");\n$templateCache.put(\"../src/templates/dashboard-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>Edit Dashboard</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=dashboardTitle>Title</label> <input type=text class=form-control id=dashboardTitle ng-model=copy.title required> </div> <div class=form-group> <label>Structure</label> <div class=radio ng-repeat=\\\"(key, structure) in structures\\\"> <label> <input type=radio value={{key}} ng-model=model.structure ng-change=\\\"changeStructure(key, structure)\\\"> {{key}} </label> </div> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div> \");\n$templateCache.put(\"../src/templates/dashboard-row.html\",\"<div class=row ng-class=row.styleClass>  </div> \");\n$templateCache.put(\"../src/templates/dashboard-title.html\",\"<h1> {{model.title}} <span style=\\\"font-size: 16px\\\" class=pull-right> <a href ng-if=editMode title=\\\"add new widget\\\" ng-click=addWidgetDialog()> <i class=\\\"glyphicon glyphicon-plus-sign\\\"></i> </a> <a href ng-if=editMode title=\\\"edit dashboard\\\" ng-click=editDashboardDialog()> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href ng-if=options.editable title=\\\"{{editMode ? \\'save changes\\' : \\'enable edit mode\\'}}\\\" ng-click=toggleEditMode()> <i class=glyphicon x-ng-class=\\\"{\\'glyphicon-edit\\' : !editMode, \\'glyphicon-save\\' : editMode}\\\"></i> </a> <a href ng-if=editMode title=\\\"undo changes\\\" ng-click=cancelEditMode()> <i class=\\\"glyphicon glyphicon-repeat adf-flip\\\"></i> </a> </span> </h1> \");\n$templateCache.put(\"../src/templates/dashboard.html\",\"<div class=dashboard-container> <div ng-include src=model.titleTemplateUrl></div> <div class=dashboard x-ng-class=\\\"{\\'edit\\' : editMode}\\\"> <adf-dashboard-row row=row adf-model=model options=options ng-repeat=\\\"row in model.rows\\\" edit-mode=editMode continuous-edit-mode=continuousEditMode> </adf-dashboard-row></div> </div> \");\n$templateCache.put(\"../src/templates/widget-add.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>Add new widget</h4> </div> <div class=modal-body> <div style=\\\"display: inline-block;\\\"> <dl class=dl-horizontal> <dt ng-repeat-start=\\\"(key, widget) in widgets\\\"> <a href ng-click=addWidget(key)> {{widget.title}} </a> </dt> <dd ng-repeat-end ng-if=widget.description> {{widget.description}} </dd> </dl> </div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div>\");\n$templateCache.put(\"../src/templates/widget-delete.html\",\"<div class=modal-header> <h4 class=modal-title>Delete {{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle>Are you sure you want to delete this widget ?</label> </div> </form> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog()>Close</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=deleteDialog()>Delete</button> </div> \");\n$templateCache.put(\"../src/templates/widget-edit.html\",\"<div class=modal-header> <button type=button class=close ng-click=closeDialog() aria-hidden=true>&times;</button> <h4 class=modal-title>{{widget.title}}</h4> </div> <div class=modal-body> <form role=form> <div class=form-group> <label for=widgetTitle>Title</label> <input type=text class=form-control id=widgetTitle ng-model=definition.title placeholder=\\\"Enter title\\\" required> </div> </form> <div ng-if=widget.edit> <adf-widget-content model=definition content=widget.edit> </adf-widget-content></div> </div> <div class=modal-footer> <button type=button class=\\\"btn btn-default\\\" ng-click=closeDialog()>Cancel</button> <button type=button class=\\\"btn btn-primary\\\" ng-click=saveDialog()>Apply</button> </div> \");\n$templateCache.put(\"../src/templates/widget-fullscreen.html\",\"<div class=modal-header> <div class=\\\"pull-right widget-icons\\\"> <a href title=\\\"Reload Widget Content\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a> <a href title=close ng-click=closeDialog()> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </div> <h4 class=modal-title>{{definition.title}}</h4> </div> <div class=modal-body> <adf-widget-content model=definition content=widget> </adf-widget-content></div> <div class=modal-footer> <button type=button class=\\\"btn btn-primary\\\" ng-click=closeDialog()>Close</button> </div> \");\n$templateCache.put(\"../src/templates/widget-title.html\",\"<h3 class=panel-title> {{definition.title}} <span class=pull-right> <a href title=\\\"reload widget content\\\" ng-if=widget.reload ng-click=reload()> <i class=\\\"glyphicon glyphicon-refresh\\\"></i> </a>  <a href title=\\\"change widget location\\\" class=adf-move ng-if=editMode> <i class=\\\"glyphicon glyphicon-move\\\"></i> </a>  <a href title=\\\"collapse widget\\\" ng-show=\\\"options.collapsible && !widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-minus\\\"></i> </a>  <a href title=\\\"expand widget\\\" ng-show=\\\"options.collapsible && widgetState.isCollapsed\\\" ng-click=\\\"widgetState.isCollapsed = !widgetState.isCollapsed\\\"> <i class=\\\"glyphicon glyphicon-plus\\\"></i> </a>  <a href title=\\\"edit widget configuration\\\" ng-click=edit() ng-if=editMode> <i class=\\\"glyphicon glyphicon-cog\\\"></i> </a> <a href title=\\\"fullscreen widget\\\" ng-click=openFullScreen() ng-show=options.maximizable> <i class=\\\"glyphicon glyphicon-fullscreen\\\"></i> </a>  <a href title=\\\"remove widget\\\" ng-click=remove() ng-if=editMode> <i class=\\\"glyphicon glyphicon-remove\\\"></i> </a> </span> </h3> \");\n$templateCache.put(\"../src/templates/widget.html\",\"<div adf-id={{definition.wid}} adf-widget-type={{definition.type}} ng-class=\\\"[{\\'panel panel-default\\':!widget.frameless || editMode},definition.styleClass]\\\" class=widget> <div class=\\\"panel-heading clearfix\\\" ng-if=\\\"!widget.frameless || editMode\\\"> <div ng-include src=definition.titleTemplateUrl></div> </div> <div ng-class=\\\"{\\'panel-body\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed> <adf-widget-content model=definition content=widget> </adf-widget-content></div> <div ng-class=\\\"{\\'panel-footer\\':!widget.frameless || editMode}\\\" uib-collapse=widgetState.isCollapsed ng-if=definition.footerTemplateUrl> <div ng-include src=definition.footerTemplateUrl></div> </div> </div> \");}]);})(window);"],"sourceRoot":"/source/"}